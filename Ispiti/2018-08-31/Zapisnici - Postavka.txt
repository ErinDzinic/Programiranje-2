#include <iostream>
using namespace std;

//narednu liniju code-a ignorisite, osim u slucaju da vam bude predstavljala smetnje u radu
#pragma warning(disable:4996)

/*
u nastavku je prikazan primjer ispitnog zapisnika (izvještaj o održanom ispitu) sa detaljima/stavkama

-------------------------------------------
Datum ispita: 07.09.2018
Predmet: Programiranje II
-------------------------------------------
IZVJESTAJ O ODRZANOM ISPITU
-------------------------------------------
Br indeksa  Ime prezime   Komisijsko***  Ocjena
16001        A. Joldic        DA        5
15251        D. Music         NE        7 Ponisteno
16014        E. Babovic       DA        8
-------------------------------------------
UKUPNO POLOZILO:    2
PROSJECNA OCJENA:    6.67
-------------------------------------------
*** komisijski ispit: ako student pristupa èetvrti put i dalje (raèunajuæi i poništene rezultate)
*/

const char * crt = "\n-------------------------------------------\n";
const int MAX = 100;

char * AlocirajNizKaraktera(const char * sadrzaj) {
    if (sadrzaj == nullptr)
        return nullptr;
    int vel = strlen(sadrzaj) + 1;
    char * temp = new char[vel];
    strcpy_s(temp, vel, sadrzaj);
    return temp;
}
struct Datum {
    int _dan, _mjesec, _godina;
    void Unos(int d, int m, int g) {
        _dan = d;
        _mjesec = m;
        _godina = g;
    }
    void Ispis() {
        cout << _dan << "." << _mjesec << "." << _godina << " ";
    }
};
struct Student {
    char * _imePrezime;
    int _brojIndeksa;
    int _polozioECTS;

    void Unos(const char* ime, float indeks) {
        _imePrezime = AlocirajNizKaraktera(ime);
        _brojIndeksa = indeks;
        _polozioECTS = 0;
    }
    void Dealociraj() {
        delete[] _imePrezime; _imePrezime = nullptr;
    }
    void DodajECTS(float ects) { _polozioECTS += ects; }
    void UmanjiECTS(float ects) { _polozioECTS -= ects; }
    void Ispis() {
        cout << _imePrezime << ", Indeks: " << _brojIndeksa << ", ECTS: " << _polozioECTS << " " << endl;
    }
};

struct ZapisnikStavka {
    int _ocjena;
    //ZapisnikStavka ae pokazivati na objekat tipa student koji se nalazi u instanci tipa Fakultet, pa nije potrebno vršiti nove alokacije
    Student* _student;
    bool _ponisteno;
    bool _komisijskoPolaganje;

    void Unos(Student* student, int ocjena, bool komisijskoPolaganje) {
        _ocjena = ocjena;
        _student = student;
        _komisijskoPolaganje = komisijskoPolaganje;
        _ponisteno = false;
    }
    void Ispis() {
        cout << _student->_imePrezime << "\t" << _ocjena << "\t" << _student->_brojIndeksa << "\t";
        if (_ponisteno)
            cout << " Ponisteno";
        cout << endl;
    }
};
struct IspitniZapisnik {
    Datum _datum;
    ZapisnikStavka * _stavke;//svaki put se dodaje po jedna stavka
    int _brojStavki;
    int _ects;
    char * _predmet;
    void Unos(Datum & datum, char* predmet, int ects) {
        _datum = datum;
        _brojStavki = 0;
        _stavke = nullptr;
        _ects = ects;
        _predmet = AlocirajNizKaraktera(predmet);
    }
    void Dealociraj() {
        delete[] _predmet; _predmet = nullptr;
        delete[] _stavke; _stavke = nullptr;
    }
    /*Prosjecnu ocjenu izraeunati koristeai lambda funkciju. u prosjek raeunati i poništene rezultate (stavke)*/
    float GetProsjecnaOcjena() { return 0; }
};

/*unutar objekta tipa Fakultet ce se cuvati podaci o svim studentima i ispitnim zapisnicima, a dodaju se pomocu globalnih funkcija*/
struct Fakultet {
    //umjesto brojaca koristiti default.ne vrijednosti
    Student* _studenti[MAX] = { nullptr };
    IspitniZapisnik* _zapisnici[MAX] = { nullptr };

    void Dealociraj() {
        for (size_t i = 0; i < MAX; i++) {           
            _studenti[i]->Dealociraj();
            _zapisnici[i]->Dealociraj();
            delete _studenti[i]; _studenti[i] = NULL;
            delete _zapisnici[i]; _zapisnici[i] = NULL;
        }
    }
};
int main() {
    Fakultet fakultet;

    /*dodaje podatke o novom studentu u fakultet */
    //fakultet, imePrezime, broj indeksa
    dodaj_student(fakultet, "A. Joldic", 16001);
    dodaj_student(fakultet, "D. Music", 15251);
    dodaj_student(fakultet, "E. Babovic    ", 16014);
    dodaj_student(fakultet, "E. Junuz", 16015);
    dodaj_student(fakultet, "J. Azemovic", 16014);//ne dodaje studenta jer je broj indeksa zauzet
    /*kraira novi zapisnik*/
     //fakultet, datum, predmet, ects krediti
    kreiraj_zapisnik(fakultet, 6, 9, 2018, "Programiranje II", 7);

    /*dodaje stavku na posljednji kreiran zapisnik, a ects studenta (_polozioECTS) uveaa ako je student položio ispit. */

    if (dodaj_stavku_na_zapisnik(fakultet, 16001, 5))
        cout << "Stavka (rezultat) uspjesno dodata!" << endl;

    /*ako je student vec dodat u zapisnik, onda se vrsi samo modifikacija njegove ocjene*/
    if (!dodaj_stavku_na_zapisnik(fakultet, 16001, 6))
        cout << "Student vec dodat na zapisnik. Ocjena je ispravljena!" << endl;

    dodaj_stavku_na_zapisnik(fakultet, 15251, 5);
    dodaj_stavku_na_zapisnik(fakultet, 16015, 6);
    dodaj_stavku_na_zapisnik(fakultet, 16014, 8);

    kreiraj_zapisnik(fakultet, 7, 9, 2018, "Raèunarske mreze", 5);
    //naredne stavke se dodaju na novi zapisnik
    dodaj_stavku_na_zapisnik(fakultet, 16015, 5);
    dodaj_stavku_na_zapisnik(fakultet, 16014, 10);


    /*u posljednjem zapisniku stavku za studenta 16001 ponistiti, a studentu umanjiti ects bodove.
    funkcija vraca false u slucaju da se student ne nalazi na posljednjem zapisniku*/

    if (ponisti_stavku_rezultat(fakultet, 16001))
        cout << "Stavka (rezultat) uspjesno ponisten!" << endl;

    if (!ponisti_stavku_rezultat(fakultet, 19001))
        cout << "Student nije pronadjen!" << endl;

    /* funkcija printaj prikazuje posljednji ispitni zapisnik u formatu prikazanom na pocetku zadatka.
    zapisnik se nece prikazati ukoliko ne posjeduje niti jednu stavku ili su sve stavke poništene. prilikom kreiranja zapisnika
    iskoristiti funkciju GetProsjecnaOcjena i njenu lambda implementaciju*/
    if (fakultet.printaj())
        cout << "Ispitni zapisnik uspjesno prikazan!" << endl;
    fakultet.Dealociraj();

    system("pause>0");
    return 0;
}